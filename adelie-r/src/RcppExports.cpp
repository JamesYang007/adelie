// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ista_solver
Rcpp::List ista_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters);
RcppExport SEXP _adelie_ista_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(ista_solver(L, v, l1, l2, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// fista_solver
Rcpp::List fista_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters);
RcppExport SEXP _adelie_fista_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(fista_solver(L, v, l1, l2, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// fista_adares_solver
Rcpp::List fista_adares_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters);
RcppExport SEXP _adelie_fista_adares_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(fista_adares_solver(L, v, l1, l2, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// group_basil_cov__
Rcpp::List group_basil_cov__(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::VectorXd>& y, const Eigen::Map<Eigen::VectorXi>& groups, const Eigen::Map<Eigen::VectorXi>& group_sizes, double alpha, const Eigen::Map<Eigen::VectorXd>& penalty, const Eigen::Map<Eigen::VectorXd>& user_lmdas_, size_t max_n_lambdas, size_t n_lambdas_iter, bool use_screen_rule, bool do_early_exit, bool verbose_diagnostic, size_t delta_screen_size, size_t max_screen_size, size_t max_n_cds, double tol, double rsq_slope_tol, double rsq_curv_tol, double newton_tol, size_t newton_max_iters, double min_ratio, size_t n_threads);
RcppExport SEXP _adelie_group_basil_cov__(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP group_sizesSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP user_lmdas_SEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP use_screen_ruleSEXP, SEXP do_early_exitSEXP, SEXP verbose_diagnosticSEXP, SEXP delta_screen_sizeSEXP, SEXP max_screen_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP cond_0_threshSEXP, SEXP cond_1_threshSEXP, SEXP newton_tolSEXP, SEXP newton_max_itersSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type group_sizes(group_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type user_lmdas_(user_lmdas_SEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type use_screen_rule(use_screen_ruleSEXP);
    Rcpp::traits::input_parameter< bool >::type do_early_exit(do_early_exitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_diagnostic(verbose_diagnosticSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_screen_size(delta_screen_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_screen_size(max_screen_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(thrSEXP);
    Rcpp::traits::input_parameter< double >::type rsq_slope_tol(cond_0_threshSEXP);
    Rcpp::traits::input_parameter< double >::type rsq_curv_tol(cond_1_threshSEXP);
    Rcpp::traits::input_parameter< double >::type newton_tol(newton_tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type newton_max_iters(newton_max_itersSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(group_basil_cov__(X, y, groups, group_sizes, alpha, penalty, user_lmdas_, max_n_lambdas, n_lambdas_iter, use_screen_rule, do_early_exit, verbose_diagnostic, delta_screen_size, max_screen_size, max_n_cds, tol, rsq_slope_tol, rsq_curv_tol, newton_tol, newton_max_iters, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// group_basil_naive__
Rcpp::List group_basil_naive__(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::VectorXd>& y, const Eigen::Map<Eigen::VectorXi>& groups, const Eigen::Map<Eigen::VectorXi>& group_sizes, double alpha, const Eigen::Map<Eigen::VectorXd>& penalty, const Eigen::Map<Eigen::VectorXd>& user_lmdas_, size_t max_n_lambdas, size_t n_lambdas_iter, bool use_screen_rule, bool do_early_exit, bool verbose_diagnostic, size_t delta_screen_size, size_t max_screen_size, size_t max_n_cds, double tol, double rsq_slope_tol, double rsq_curv_tol, double newton_tol, size_t newton_max_iters, double min_ratio, size_t n_threads);
RcppExport SEXP _adelie_group_basil_naive__(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP group_sizesSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP user_lmdas_SEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP use_screen_ruleSEXP, SEXP do_early_exitSEXP, SEXP verbose_diagnosticSEXP, SEXP delta_screen_sizeSEXP, SEXP max_screen_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP cond_0_threshSEXP, SEXP cond_1_threshSEXP, SEXP newton_tolSEXP, SEXP newton_max_itersSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type group_sizes(group_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type user_lmdas_(user_lmdas_SEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type use_screen_rule(use_screen_ruleSEXP);
    Rcpp::traits::input_parameter< bool >::type do_early_exit(do_early_exitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_diagnostic(verbose_diagnosticSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_screen_size(delta_screen_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_screen_size(max_screen_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(thrSEXP);
    Rcpp::traits::input_parameter< double >::type rsq_slope_tol(cond_0_threshSEXP);
    Rcpp::traits::input_parameter< double >::type rsq_curv_tol(cond_1_threshSEXP);
    Rcpp::traits::input_parameter< double >::type newton_tol(newton_tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type newton_max_iters(newton_max_itersSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(group_basil_naive__(X, y, groups, group_sizes, alpha, penalty, user_lmdas_, max_n_lambdas, n_lambdas_iter, use_screen_rule, do_early_exit, verbose_diagnostic, delta_screen_size, max_screen_size, max_n_cds, tol, rsq_slope_tol, rsq_curv_tol, newton_tol, newton_max_iters, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// newton_solver
Rcpp::List newton_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters);
RcppExport SEXP _adelie_newton_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(newton_solver(L, v, l1, l2, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// newton_abs_solver
Rcpp::List newton_abs_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters);
RcppExport SEXP _adelie_newton_abs_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(newton_abs_solver(L, v, l1, l2, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// newton_abs_debug_solver
Rcpp::List newton_abs_debug_solver(const Eigen::Map<Eigen::VectorXd>& L, const Eigen::Map<Eigen::VectorXd>& v, double l1, double l2, double tol, size_t max_iters, bool smart_init);
RcppExport SEXP _adelie_newton_abs_debug_solver(SEXP LSEXP, SEXP vSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP tolSEXP, SEXP max_itersSEXP, SEXP smart_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< bool >::type smart_init(smart_initSEXP);
    rcpp_result_gen = Rcpp::wrap(newton_abs_debug_solver(L, v, l1, l2, tol, max_iters, smart_init));
    return rcpp_result_gen;
END_RCPP
}
// objective
double objective(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& r, const Eigen::Map<Eigen::VectorXi>& groups, const Eigen::Map<Eigen::VectorXi>& group_sizes, double alpha, const Eigen::Map<Eigen::VectorXd>& penalty, double lmda, const Eigen::Map<Eigen::VectorXd>& beta);
RcppExport SEXP _adelie_objective(SEXP ASEXP, SEXP rSEXP, SEXP groupsSEXP, SEXP group_sizesSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP lmdaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type group_sizes(group_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lmda(lmdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(objective(A, r, groups, group_sizes, alpha, penalty, lmda, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_adelie_ista_solver", (DL_FUNC) &_adelie_ista_solver, 6},
    {"_adelie_fista_solver", (DL_FUNC) &_adelie_fista_solver, 6},
    {"_adelie_fista_adares_solver", (DL_FUNC) &_adelie_fista_adares_solver, 6},
    {"_adelie_group_basil_cov__", (DL_FUNC) &_adelie_group_basil_cov__, 22},
    {"_adelie_group_basil_naive__", (DL_FUNC) &_adelie_group_basil_naive__, 22},
    {"_adelie_newton_solver", (DL_FUNC) &_adelie_newton_solver, 6},
    {"_adelie_newton_abs_solver", (DL_FUNC) &_adelie_newton_abs_solver, 6},
    {"_adelie_newton_abs_debug_solver", (DL_FUNC) &_adelie_newton_abs_debug_solver, 7},
    {"_adelie_objective", (DL_FUNC) &_adelie_objective, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_adelie(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
